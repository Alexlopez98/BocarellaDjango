Instructivo de Instalación – Proyecto Django (Bocarella API)
============================================================

1. Requisitos previos
---------------------
- Tener instalado Python 3.10 o superior (descargar desde: https://www.python.org/downloads/)
- Tener instalado pip (incluido con Python)
- Tener instalado git (para clonar el repositorio)
- Tener Oracle Client si se usará `oracledb`
- Postman para pruebas de la API: https://www.postman.com/downloads/

2. Clonar el repositorio
------------------------
git clone https://github.com/Alexlopez98/BocarellaDjango.git
cd proyecto

3. Instalar requerimientos
--------------------------
Ejecutar en la terminal (PowerShell, CMD o bash):

pip install -r requirements.txt

Esto instalará Django, `oracledb` y todas las librerías necesarias.

4. Configuración de base de datos
---------------------------------
En settings.py, configurar la conexión. Ejemplo para Oracle:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.oracle',
        'NAME':'127.0.0.1:1521/orcl',
        'USER': 'c###bocarella',
        'PASSWORD': 'bocarella',
        'TEST':{
            'USER': 'default_test',
            'TBLSPACE': 'default_test_tbls',
            'TBLSPACE_TMP': 'default_test_tbls_tmp',
        },
    },
}

5. Aplicar migraciones
----------------------
python manage.py migrate

6. Crear superusuario
---------------------
python manage.py createsuperuser

7. Levantar servidor
--------------------
python manage.py runserver

El proyecto quedará disponible en:
http://127.0.0.1:8000/

8. Probar la API con Postman
----------------------------
8.1 Obtener token JWT
- Método: POST
- URL: http://127.0.0.1:8000/api/token/
- Body → raw → JSON:

{
  "username": "tu_usuario",
  "password": "tu_contraseña"
}

- Respuesta esperada:

{
  "refresh": "<refresh_token>",
  "access": "<access_token>"
}

Copia el access_token para usarlo en otros endpoints.

8.2 Usar token en otros endpoints
- Método: GET o POST según endpoint
- Headers:

Key           | Value
--------------|---------------------------
Authorization | Bearer <access_token>

- Ejemplo URL: http://127.0.0.1:8000/api/pizzas/
- Respuesta: lista de pizzas disponibles.

8.3 Endpoints principales
-------------------------
Endpoint                     | Método | Descripción                         | Requiere token
-----------------------------|--------|-------------------------------------|----------------
/api/token/                  | POST   | Obtener token JWT                   | No
/api/pizzas/                 | GET    | Listar pizzas                       | No
/api/pizzas/<id>/            | GET    | Detalle de pizza                    | Sí
/api/pedidos/                | GET    | Pedidos del usuario                 | Sí
/api/pedidos/<id>/           | GET    | Detalle de pedido                   | Sí
/api/pedidos/todos/          | GET    | Todos los pedidos (solo admin)     | Sí
/api/login/                  | POST   | Obtener token manualmente           | No

Con estos pasos, cualquiera puede clonar, configurar y probar el proyecto de forma completa usando Django y Postman.



# Instrucciones de Restauración de la Base de Datos – Bocarella API

Estas instrucciones permiten recrear la base de datos del proyecto **Bocarella API** en Oracle a partir de los archivos entregados (`estructura.sql` y `datos_iniciales.sql`).

1. Requisitos previos

---

* Tener instalado **Oracle Database** (local o remoto).
* Tener acceso a un usuario con permisos para crear tablas.
* Contar con los archivos:

  * `estructura.sql` (definición de tablas, relaciones y restricciones)
  * `datos_iniciales.sql` (inserciones de datos base)

2. Conectarse a la base de datos

---

Puedes usar **SQL Developer** o **SQL*Plus**.

### Ejemplo con SQL*Plus:

```
sqlplus c###bocarella/bocarella@127.0.0.1:1521/orcl
```

3. Crear las estructuras de la base de datos

---

Ejecutar el script de estructura:

```
@estructura.sql
```

Esto creará todas las tablas, claves foráneas, secuencias y restricciones necesarias.

4. Insertar los datos iniciales

---

Ejecutar el script de datos:

```
@datos_iniciales.sql
```

Esto cargará la información básica (usuarios, roles, productos, etc.) para que el sistema esté listo para probar.

5. Verificar la instalación

---

Ejecuta el siguiente comando para confirmar que las tablas se crearon correctamente:

```sql
SELECT table_name FROM user_tables;
```

Deberías visualizar al menos 6 tablas (por ejemplo: USUARIO, ROL, PIZZA, PEDIDO, DETALLE_PEDIDO, CLIENTE).

6. Probar conexión desde Django

---

Una vez restaurada la base de datos, vuelve al entorno del proyecto Django y ejecuta:

```
python manage.py runserver
```

Si no se muestran errores de conexión, la configuración y restauración de la base de datos fue exitosa.

---

Con estos pasos, cualquier usuario puede restaurar completamente la base de datos de **Bocarella API**, inicializarla con datos válidos y ejecutar la aplicación sin depender de migraciones adicionales.
